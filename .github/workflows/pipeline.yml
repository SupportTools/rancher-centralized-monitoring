name: CI/CD

on:
  push:
  pull_request:

jobs:
  Test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install static analysis tools
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.62.2
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install github.com/psampaz/go-mod-outdated@latest
          go install github.com/remyoudompheng/go-misc/deadcode@latest

      - name: Go static analysis
        run: |
          golangci-lint run ./...
          staticcheck ./...
          go vet ./...
          deadcode .

      - name: Dependency management
        run: |
          go mod download
          go mod verify
          go mod tidy -v
          git diff --exit-code go.mod go.sum || (echo "go.mod or go.sum was modified by go mod tidy - please run 'go mod tidy' locally and commit the changes" && exit 1)

      - name: Run tests
        run: |
          go test -v -race ./...

      - name: Security scanning
        run: |
          gosec ./...

  Build:
    needs: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # Get latest tag or default to v0.1.0
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
            # Extract version numbers and increment patch
            if [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
              MAJOR=${BASH_REMATCH[1]}
              MINOR=${BASH_REMATCH[2]}
              PATCH=$((${BASH_REMATCH[3]} + 1))
              VERSION="v${MAJOR}.${MINOR}.${PATCH}-dev.${GITHUB_SHA::8}"
            else
              VERSION="v0.1.0-dev.${GITHUB_SHA::8}"
            fi
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build and push
        run: |
          docker buildx build \
          --platform linux/amd64 \
          --pull \
          --build-arg VERSION=${{ steps.version.outputs.VERSION }} \
          --build-arg GIT_COMMIT=${{ github.sha }} \
          --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
          --cache-from supporttools/rancher-centralized-monitoring:latest \
          -t supporttools/rancher-centralized-monitoring:"${{ steps.version.outputs.VERSION }}" \
          -t supporttools/rancher-centralized-monitoring:latest \
          --push \
          -f Dockerfile .

  Publish:
    runs-on: ubuntu-latest
    needs:
      - Build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # Get latest tag or default to v0.1.0
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
            # Extract version numbers and increment patch
            if [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
              MAJOR=${BASH_REMATCH[1]}
              MINOR=${BASH_REMATCH[2]}
              PATCH=$((${BASH_REMATCH[3]} + 1))
              VERSION="v${MAJOR}.${MINOR}.${PATCH}-dev.${GITHUB_SHA::8}"
            else
              VERSION="v0.1.0-dev.${GITHUB_SHA::8}"
            fi
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Helm Lint
        run: helm lint charts/rancher-centralized-monitoring/

      - name: Package Helm chart
        run: |
          export CHART_VERSION="${{ steps.version.outputs.VERSION }}"
          export APP_VERSION="${{ steps.version.outputs.VERSION }}"
          export IMAGE_TAG="${{ steps.version.outputs.VERSION }}"
          echo "CHART_VERSION=${CHART_VERSION}"
          echo "APP_VERSION=${APP_VERSION}"
          envsubst < charts/rancher-centralized-monitoring/Chart.yaml.template > charts/rancher-centralized-monitoring/Chart.yaml
          envsubst < charts/rancher-centralized-monitoring/values.yaml.template > charts/rancher-centralized-monitoring/values.yaml
          helm package charts/rancher-centralized-monitoring --destination helm/repo

      - name: Checkout helm-chart repository
        uses: actions/checkout@v4
        with:
          repository: supporttools/helm-chart
          path: helm-chart
          token: ${{ secrets.BOT_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.email "github-action@users.noreply.github.com"
          git config --global user.name "GitHub Action"

      - name: Update Helm repository
        run: |
          cp helm/repo/rancher-centralized-monitoring-*.tgz helm-chart/
          cd helm-chart
          helm repo index . --url https://charts.support.tools/
          git add .
          git commit -m "Update Helm chart for rancher-centralized-monitoring"
          git push
